An XOR linked list is a more memory efficient doubly linked list.
Instead of each node holding next and prev fields, it holds a field
named both, which is a XOR of the next node and the previous node.

Implement a XOR linked list; it has an add(element) which adds the
element to the end, and a get(index) which returns the node at index.

Can't do this in Python, need to use a language that lets you manipulate
pointers. To traverse an XOR linked list, you can XOR the previous node's
address with the both of the current node's `both` value, giving you the
address of the next node, then move there. To add an element, you need to
traverse to the end of the list, create the address, then XOR the new address
with the previous last node's `both` to get its new `both`, then set it's
address as the both of the new node's `both`
